// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "email": "razmolodinivan@mail.ru"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/confirmCode": {
            "get": {
                "summary": "Проверка кода подтверждения",
                "parameters": [
                    {
                        "type": "string",
                        "description": "` + "`" + `org` + "`" + ` or ` + "`" + `employee` + "`" + `",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "адрес на который будет отправлено письмо (например: email@exmp.ru)",
                        "name": "code",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "возвращает пустой объект",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/auth/sendCode": {
            "get": {
                "summary": "Отправка кода подтверждения почты",
                "parameters": [
                    {
                        "type": "string",
                        "description": "` + "`" + `org` + "`" + ` or ` + "`" + `employee` + "`" + `",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "адрес на который будет отправлено письмо (например: email@exmp.ru)",
                        "name": "email",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "возвращает пустой объект",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/auth/signIn.Employee": {
            "post": {
                "description": "Метод позволяет войти в аккаунт сотрудника. Работает только с токеном огранизации.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Вход для сотрудника",
                "parameters": [
                    {
                        "description": "Объект для входа в огранизацию.",
                        "name": "json",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/myservice.signInEmployeeInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Возвращает ` + "`" + `jwt токен` + "`" + ` при успешной авторизации",
                        "schema": {
                            "$ref": "#/definitions/myservice.signInEmployeeOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/myservice.serviceError"
                        }
                    }
                }
            }
        },
        "/auth/signIn.Org": {
            "post": {
                "description": "Метод позволяет войти в аккаунт организации.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Вход для организации",
                "parameters": [
                    {
                        "description": "Объект для входа в огранизацию.",
                        "name": "json",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/myservice.signInOrgInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Возвращает ` + "`" + `jwt токен` + "`" + ` при успешной авторизации",
                        "schema": {
                            "$ref": "#/definitions/myservice.signInOrgOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/myservice.serviceError"
                        }
                    }
                }
            }
        },
        "/auth/signUp.Employee": {
            "post": {
                "description": "Метод позволяет зарегистрировать ссотрудника. Работает только с токеном организации.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Регистрация сотрудника",
                "parameters": [
                    {
                        "description": "Объект для регитсрации сотрудника.",
                        "name": "json",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/myservice.signUpEmployeeInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Возвращаемый объект при регистрации сотрудника",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/myservice.serviceError"
                        }
                    }
                }
            }
        },
        "/auth/signUp.Org": {
            "post": {
                "description": "Метод позволяет зарегистрировать организацию",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Регистрация организации",
                "parameters": [
                    {
                        "description": "Объект для регитсрации огранизации.",
                        "name": "json",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/myservice.signUpOrgInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Возвращаемый объект при регистрации огранизации",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/myservice.serviceError"
                        }
                    }
                }
            }
        },
        "/category": {
            "get": {
                "description": "Метод позволяет получить список категорий точки",
                "produces": [
                    "application/json"
                ],
                "summary": "Список всех категорий точки",
                "responses": {
                    "200": {
                        "description": "Возвращает массив категорий",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/myservice.categoryOutputModel"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/myservice.serviceError"
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "summary": "Добавить новую категорию к точке",
                "parameters": [
                    {
                        "description": "Принимаемый объект",
                        "name": "type",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/myservice.createCategoryInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "возвращает пустой объект",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/category/:id": {
            "delete": {
                "description": "Метод позволяет удалить категоирю из точки",
                "produces": [
                    "application/json"
                ],
                "summary": "Удалить категоирю из точки",
                "responses": {
                    "200": {
                        "description": "возвращает пустой объект",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/myservice.serviceError"
                        }
                    }
                }
            }
        },
        "/employees": {
            "get": {
                "description": "Метод позволяет получить список всех сотрудников",
                "produces": [
                    "application/json"
                ],
                "summary": "Список всех сотрудников",
                "responses": {
                    "200": {
                        "description": "Возвращает массив сотрудников",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/myservice.employeeOutputModel"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/myservice.serviceError"
                        }
                    }
                }
            }
        },
        "/outlets": {
            "get": {
                "description": "Метод позволяет получить список всех торговых точек",
                "produces": [
                    "application/json"
                ],
                "summary": "Список всех торговых точек",
                "responses": {
                    "200": {
                        "description": "Возвращает массив торговых точек",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/myservice.outletOutputModel"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/myservice.serviceError"
                        }
                    }
                }
            },
            "post": {
                "description": "Метод позволяет добавить торговую точку",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Добавить торговую точку",
                "parameters": [
                    {
                        "description": "Объект для добавления торговой точки.",
                        "name": "json",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/myservice.createOutletInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Возвращает пустой объект",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/myservice.serviceError"
                        }
                    }
                }
            }
        },
        "/sessions": {
            "get": {
                "description": "Метод позволяет получить список всех сессий",
                "produces": [
                    "application/json"
                ],
                "summary": "Список всех сессий",
                "responses": {
                    "200": {
                        "description": "Возвращает массив сессий",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/myservice.sessionOutputModel"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/myservice.serviceError"
                        }
                    }
                }
            },
            "post": {
                "description": "Открывает сессию с id указанным в jwt токен.\n- Поле ` + "`" + `action` + "`" + ` принимает два параметра ` + "`" + `open` + "`" + ` (для открытия сессии) и ` + "`" + `close` + "`" + ` (для закрытия сессии)",
                "summary": "Открыть или закрыть сессию",
                "parameters": [
                    {
                        "description": "Принимаемый объект",
                        "name": "type",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/myservice.openOrCloseSessionInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "возвращает пустой объект",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/sessions/last": {
            "get": {
                "description": "Метод позволяет получить последнюю сессию торговой точки, к которой привязан jwt токен",
                "produces": [
                    "application/json"
                ],
                "summary": "Последняя закрытая сессия торговой точки (к которой привязан jwt токен)",
                "responses": {
                    "200": {
                        "description": "Возвращает последнюю закрытую сессию точки продаж",
                        "schema": {
                            "$ref": "#/definitions/myservice.sessionOutputModel"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/myservice.serviceError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/myservice.serviceError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "myservice.categoryOutputModel": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "myservice.createCategoryInput": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "myservice.createOutletInput": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "myservice.employeeOutputModel": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                }
            }
        },
        "myservice.openOrCloseSessionInput": {
            "type": "object",
            "required": [
                "action"
            ],
            "properties": {
                "action": {
                    "description": "\"open\" or \"close\"",
                    "type": "string"
                },
                "cash": {
                    "type": "number"
                },
                "date": {
                    "type": "integer"
                }
            }
        },
        "myservice.outletOutputModel": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "myservice.serviceError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "error": {
                    "type": "string"
                }
            }
        },
        "myservice.sessionOutputModel": {
            "type": "object",
            "properties": {
                "cash_close": {
                    "type": "number"
                },
                "cash_open": {
                    "type": "number"
                },
                "date_close": {
                    "type": "integer"
                },
                "date_open": {
                    "type": "integer"
                },
                "employee_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "outlet_id": {
                    "type": "integer"
                }
            }
        },
        "myservice.signInEmployeeInput": {
            "type": "object",
            "required": [
                "password"
            ],
            "properties": {
                "id": {
                    "type": "integer"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "myservice.signInEmployeeOutput": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "myservice.signInOrgInput": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "myservice.signInOrgOutput": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "myservice.signUpEmployeeInput": {
            "type": "object",
            "required": [
                "name",
                "password",
                "role"
            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                }
            }
        },
        "myservice.signUpOrgInput": {
            "type": "object",
            "required": [
                "email",
                "name",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "0.1-alpha",
	Host:        "",
	BasePath:    "/api/v1",
	Schemes:     []string{},
	Title:       "POS-Ninja Backend API",
	Description: "",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register("swagger", &s{})
}

basePath: /api/v1
definitions:
  myservice.categoryOutputModel:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  myservice.createCategoryInput:
    properties:
      name:
        type: string
    type: object
  myservice.createOutletInput:
    properties:
      name:
        type: string
    type: object
  myservice.employeeOutputModel:
    properties:
      id:
        type: integer
      name:
        type: string
      role:
        type: string
    type: object
  myservice.openOrCloseSessionInput:
    properties:
      action:
        description: '"open" or "close"'
        type: string
      cash:
        type: number
      date:
        type: integer
    required:
    - action
    type: object
  myservice.outletOutputModel:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  myservice.serviceError:
    properties:
      code:
        type: integer
      error:
        type: string
    type: object
  myservice.sessionOutputModel:
    properties:
      cash_close:
        type: number
      cash_open:
        type: number
      date_close:
        type: integer
      date_open:
        type: integer
      employee_id:
        type: integer
      id:
        type: integer
      outlet_id:
        type: integer
    type: object
  myservice.signInEmployeeInput:
    properties:
      id:
        type: integer
      password:
        type: string
    required:
    - password
    type: object
  myservice.signInEmployeeOutput:
    properties:
      token:
        type: string
    type: object
  myservice.signInOrgInput:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  myservice.signInOrgOutput:
    properties:
      token:
        type: string
    type: object
  myservice.signUpEmployeeInput:
    properties:
      name:
        type: string
      password:
        type: string
      role:
        type: string
    required:
    - name
    - password
    - role
    type: object
  myservice.signUpOrgInput:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    required:
    - email
    - name
    - password
    type: object
info:
  contact:
    email: razmolodinivan@mail.ru
  title: POS-Ninja Backend API
  version: 0.1-alpha
paths:
  /auth/confirmCode:
    get:
      parameters:
      - description: '`org` or `employee`'
        in: query
        name: type
        type: string
      - description: 'адрес на который будет отправлено письмо (например: email@exmp.ru)'
        in: query
        name: code
        type: string
      responses:
        "200":
          description: возвращает пустой объект
          schema:
            type: object
      summary: Проверка кода подтверждения
  /auth/sendCode:
    get:
      parameters:
      - description: '`org` or `employee`'
        in: query
        name: type
        type: string
      - description: 'адрес на который будет отправлено письмо (например: email@exmp.ru)'
        in: query
        name: email
        type: string
      responses:
        "200":
          description: возвращает пустой объект
          schema:
            type: object
      summary: Отправка кода подтверждения почты
  /auth/signIn.Employee:
    post:
      consumes:
      - application/json
      description: Метод позволяет войти в аккаунт сотрудника. Работает только с токеном
        огранизации.
      parameters:
      - description: Объект для входа в огранизацию.
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/myservice.signInEmployeeInput'
      produces:
      - application/json
      responses:
        "200":
          description: Возвращает `jwt токен` при успешной авторизации
          schema:
            $ref: '#/definitions/myservice.signInEmployeeOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/myservice.serviceError'
      summary: Вход для сотрудника
  /auth/signIn.Org:
    post:
      consumes:
      - application/json
      description: Метод позволяет войти в аккаунт организации.
      parameters:
      - description: Объект для входа в огранизацию.
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/myservice.signInOrgInput'
      produces:
      - application/json
      responses:
        "200":
          description: Возвращает `jwt токен` при успешной авторизации
          schema:
            $ref: '#/definitions/myservice.signInOrgOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/myservice.serviceError'
      summary: Вход для организации
  /auth/signUp.Employee:
    post:
      consumes:
      - application/json
      description: Метод позволяет зарегистрировать ссотрудника. Работает только с
        токеном организации.
      parameters:
      - description: Объект для регитсрации сотрудника.
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/myservice.signUpEmployeeInput'
      produces:
      - application/json
      responses:
        "201":
          description: Возвращаемый объект при регистрации сотрудника
          schema:
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/myservice.serviceError'
      summary: Регистрация сотрудника
  /auth/signUp.Org:
    post:
      consumes:
      - application/json
      description: Метод позволяет зарегистрировать организацию
      parameters:
      - description: Объект для регитсрации огранизации.
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/myservice.signUpOrgInput'
      produces:
      - application/json
      responses:
        "201":
          description: Возвращаемый объект при регистрации огранизации
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/myservice.serviceError'
      summary: Регистрация организации
  /category:
    get:
      description: Метод позволяет получить список категорий точки
      produces:
      - application/json
      responses:
        "200":
          description: Возвращает массив категорий
          schema:
            items:
              $ref: '#/definitions/myservice.categoryOutputModel'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/myservice.serviceError'
      summary: Список всех категорий точки
    post:
      consumes:
      - application/json
      parameters:
      - description: Принимаемый объект
        in: body
        name: type
        schema:
          $ref: '#/definitions/myservice.createCategoryInput'
      responses:
        "201":
          description: возвращает пустой объект
          schema:
            type: object
      summary: Добавить новую категорию к точке
  /category/:id:
    delete:
      description: Метод позволяет удалить категоирю из точки
      produces:
      - application/json
      responses:
        "200":
          description: возвращает пустой объект
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/myservice.serviceError'
      summary: Удалить категоирю из точки
  /employees:
    get:
      description: Метод позволяет получить список всех сотрудников
      produces:
      - application/json
      responses:
        "200":
          description: Возвращает массив сотрудников
          schema:
            items:
              $ref: '#/definitions/myservice.employeeOutputModel'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/myservice.serviceError'
      summary: Список всех сотрудников
  /outlets:
    get:
      description: Метод позволяет получить список всех торговых точек
      produces:
      - application/json
      responses:
        "200":
          description: Возвращает массив торговых точек
          schema:
            items:
              $ref: '#/definitions/myservice.outletOutputModel'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/myservice.serviceError'
      summary: Список всех торговых точек
    post:
      consumes:
      - application/json
      description: Метод позволяет добавить торговую точку
      parameters:
      - description: Объект для добавления торговой точки.
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/myservice.createOutletInput'
      produces:
      - application/json
      responses:
        "200":
          description: Возвращает пустой объект
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/myservice.serviceError'
      summary: Добавить торговую точку
  /sessions:
    get:
      description: Метод позволяет получить список всех сессий
      produces:
      - application/json
      responses:
        "200":
          description: Возвращает массив сессий
          schema:
            items:
              $ref: '#/definitions/myservice.sessionOutputModel'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/myservice.serviceError'
      summary: Список всех сессий
    post:
      description: |-
        Открывает сессию с id указанным в jwt токен.
        - Поле `action` принимает два параметра `open` (для открытия сессии) и `close` (для закрытия сессии)
      parameters:
      - description: Принимаемый объект
        in: body
        name: type
        schema:
          $ref: '#/definitions/myservice.openOrCloseSessionInput'
      responses:
        "201":
          description: возвращает пустой объект
          schema:
            type: object
      summary: Открыть или закрыть сессию
  /sessions/last:
    get:
      description: Метод позволяет получить последнюю сессию торговой точки, к которой
        привязан jwt токен
      produces:
      - application/json
      responses:
        "200":
          description: Возвращает последнюю закрытую сессию точки продаж
          schema:
            $ref: '#/definitions/myservice.sessionOutputModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/myservice.serviceError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/myservice.serviceError'
      summary: Последняя закрытая сессия торговой точки (к которой привязан jwt токен)
swagger: "2.0"
